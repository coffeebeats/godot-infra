name: "🏗️ godot-infra: Build 'godot' export template"
description: "Compiles a 'godot' export template."

inputs:
  platform:
    description: "The 'godot' platform to build for."
    required: true
  profile:
    description: "The execution profile to build with."
    required: false
    default: release
  features:
    description: "A space-, comma- or new line-separated list of features to enable."
    required: false
    default: ""
  out-dir:
    description: "The directory in which to place the export templates."
    required: false
    default: "dist"
  project-dir:
    description: "The path to the game project directory."
    required: false
    default: "."
  manifest-path:
    description: "A specific 'gdbuild' manifest filename (relative to 'project-dir')."
    required: false

outputs:
  path:
    description: "The directory containing the export template artifacts."
    value: ${{ steps.config.outputs.runner-dist }}

runs:
  using: "composite"
  steps:
    - name: Configure action properties
      id: config
      shell: bash
      run: |
        # Create required directories
        mkdir -p $HOME/.scons
        mkdir -p ${{ inputs.out-dir }}

        # Export runner paths
        echo "runner-project=$(realpath ${{ inputs.project-dir }})"  >> "$GITHUB_OUTPUT"
        echo "runner-dist=$(realpath ${{ inputs.out-dir }})" >> "$GITHUB_OUTPUT"
        echo "runner-scons=$HOME/.scons" >> "$GITHUB_OUTPUT"

        # Export container paths
        echo "container-workspace=/home/ubuntu/godot-infra" >> "$GITHUB_ENV"

    - name: Set up 'podman'
      uses: ./.github/actions/setup-podman
      with:
        login: true
        install-buildah: false
        install-podman: true

    # TODO: Centralize this once additional secrets need to be set.
    - name: Create a secret for the encryption key
      if: env.SCRIPT_AES256_ENCRYPTION_KEY != ''
      shell: bash
      run: podman secret create --env=true encryption-key SCRIPT_AES256_ENCRYPTION_KEY

    - name: Run the hash print command
      id: template-hash
      shell: bash
      run: |
        FEATURES=()
        for f in $(printf "${{ inputs.features }}" | tr -s ', ' \\n); do
          FEATURES+=(--feature $f)
        done

        HASH=$(
          podman run \
            --userns keep-id:uid=1000,gid=1000 \
            -v ${{ steps.config.outputs.runner-project }}:${{ env.container-workspace }}/project:ro,Z \
            $([[ -d "$GDENV_HOME" ]] && echo "-v $(realpath $GDENV_HOME):${{ env.container-workspace }}/.gdenv:Z") \
            $([[ -d "$GDPACK_HOME" ]] && echo "-v $(realpath $GDPACK_HOME):${{ env.container-workspace }}/.gdpack:Z") \
            $([[ -d "$GDBUILD_HOME" ]] && echo "-v $(realpath $GDBUILD_HOME):${{ env.container-workspace }}/.gdbuild:Z") \
            --secret encryption-key,type=env,target=SCRIPT_AES256_ENCRYPTION_KEY \
            ghcr.io/${{ github.repository_owner }}/godot-infra:latest gdbuild template \
              --print-hash \
              --project ${{ env.container-workspace }}/project \
              ${FEATURES[@]} \
              $([[ '${{ inputs.profile }}' == 'debug' ]] && echo --debug) \
              $([[ '${{ inputs.profile }}' == 'release' ]] && echo --release) \
              $([[ '${{ inputs.profile }}' == 'release_debug' ]] && echo --release_debug) \
              $([[ '${{ inputs.manifest-path }}' != '' ]] && echo --config "${{ env.container-workspace }}/project/${{ inputs.manifest-path }}") \
              ${{ inputs.platform }}
        )

        echo "value=$(echo $HASH | tail -1)" >> $GITHUB_OUTPUT

    - name: Cache the 'gdbuild' store's template artifact directory
      id: store
      uses: actions/cache@v4
      with:
        path: ${{ env.GDBUILD_HOME }}/templates
        key: templates-${{ runner.os }}-${{ steps.template-hash.outputs.value }}

    - name: Configure runner
      if: steps.store.outputs.cache-hit != 'true'
      uses: ./.github/actions/setup-runner

    - name: Cache the 'SCons' build directory
      if: steps.store.outputs.cache-hit != 'true'
      uses: actions/cache@v4
      with:
        path: ${{ steps.config.outputs.runner-scons }}
        key: scons-${{ runner.os }}-${{ inputs.platform }}-${{ inputs.profile }}-${{ steps.template-hash.outputs.value }}
        restore-keys: |
          scons-${{ runner.os }}-${{ inputs.platform }}-${{ inputs.profile }}-
          scons-${{ runner.os }}-${{ inputs.platform }}-

    - name: Run the build command
      shell: bash
      run: |
        FEATURES=()
        for f in $(printf "${{ inputs.features }}" | tr -s ', ' \\n); do
          FEATURES+=(--feature $f)
        done

        podman run \
          --userns keep-id:uid=1000,gid=1000 \
          -v ${{ steps.config.outputs.runner-dist }}:${{ env.container-workspace }}/dist:Z \
          -v ${{ steps.config.outputs.runner-scons }}:${{ env.container-workspace }}/.scons:Z \
          -v ${{ steps.config.outputs.runner-project }}:${{ env.container-workspace }}/project:ro,Z \
          $([[ -d "$GDENV_HOME" ]] && echo "-v $(realpath $GDENV_HOME):${{ env.container-workspace }}/.gdenv:Z") \
          $([[ -d "$GDPACK_HOME" ]] && echo "-v $(realpath $GDPACK_HOME):${{ env.container-workspace }}/.gdpack:Z") \
          $([[ -d "$GDBUILD_HOME" ]] && echo "-v $(realpath $GDBUILD_HOME):${{ env.container-workspace }}/.gdbuild:Z") \
          -e SCONS_CACHE=${{ env.container-workspace }}/.scons \
          --secret encryption-key,type=env,target=SCRIPT_AES256_ENCRYPTION_KEY \
          ghcr.io/${{ github.repository_owner }}/godot-infra:latest gdbuild template \
            --verbose \
            --out ${{ env.container-workspace }}/dist \
            --project ${{ env.container-workspace }}/project \
            ${FEATURES[@]} \
            $([[ '${{ inputs.profile }}' == 'debug' ]] && echo --debug) \
            $([[ '${{ inputs.profile }}' == 'release' ]] && echo --release) \
            $([[ '${{ inputs.profile }}' == 'release_debug' ]] && echo --release_debug) \
            $([[ '${{ inputs.manifest-path }}' != '' ]] && echo --config "${{ env.container-workspace }}/project/${{ inputs.manifest-path }}") \
            ${{ inputs.platform }}

    - name: Print 'godot' export template info
      shell: bash
      run: ls -ls ${{ steps.config.outputs.runner-dist }}
