name: "🏗️ Compile: Godot export template (Windows)"

on:
  workflow_call:
    inputs:
      godot-src-rev:
        type: string
        description: "The revision/tag name in the 'godot-src-repository' to check out."
        required: true
      godot-src-repository:
        type: string
        description: "The name of a repository containing the Godot source code."
        required: false
        default: godotengine/godot

      profile:
        type: string
        description: "The optimization profile of the compiled export template."
        required: false
        default: release
      encryption-key:
        type: string
        description: "A Godot script encryption key to embed within the export template."
        required: false
      custompy-path:
        type: string
        description: "A path to a 'custom.py' file containing template build options (must be in $GITHUB_WORKSPACE)."
        required: false
      use-double-precision:
        type: boolean
        description: "Whether to enable double precision for the export template."
        required: false
        default: false

      # Windows-specific inputs.
      icon-path:
        type: string
        description: "A path to an application icon (must be in $GITHUB_WORKSPACE)."
        required: true

      timeout:
        type: number
        description: "The workflow's maximum allowed run duration (in minutes)."
        required: false
        default: 60

    outputs:
      path:
        description: "The name of the 'godot' export template artifact."
        value: ${{ jobs.compile.outputs.name }}

defaults:
  run:
    shell: bash

jobs:
  godot-version:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    outputs:
      semver: ${{ steps.godot.outputs.semantic-version }}
      major-minor: ${{ steps.godot.outputs.major-minor-version }}

    steps:
      - name: Download Godot source code
        id: godot
        uses: "./.github/actions/vendor-godot-source"
        with:
          artifact-name: godot-src
          godot-src-rev: ${{ inputs.godot-src-rev }}
          godot-src-repository: ${{ inputs.godot-src-repository }}

  process-icon:
    if: inputs.icon-path != '' && !endsWith(inputs.icon-path, '.ico')

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Install 'imagemagick'
        run: apt-get install -y imagemagick

      - name: Convert icon to '.ico'
        run: convert ${{ inputs.icon-path }} -define icon:auto-resize=256,128,64,48,32,16 godot.ico

      - name: Upload converted icon
        uses: actions/upload-artifact@v4
        with:
          name: godot.ico
          path: godot.ico
          if-no-files-found: error

  compile:
    needs: ["godot-version", "process-icon"]

    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJson(inputs.timeout) }}

    container: ghcr.io/coffeebeats/compile-godot-export-template:godot-${{ needs.godot-version.outputs.major-minor }}-windows

    outputs:
      name: ${{ steps.config-artifact.outputs.name }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.godot-src-rev }}
          repository: ${{ inputs.godot-src-repository }}

      # ------------- Restore the export template + SCons caches ------------- #

      # NOTE: This is required so as to avoid leaking the encryption key.
      - name: Determine Godot export template cache ID
        id: export-template-cache-id
        shell: bash
        run: |
          INPUT="windows-${{ hashFiles(github.workspace) }}"
          INPUT="$INPUT-${{ inputs.profile }}-${{ inputs.encryption-key }}-${{ inputs.use-double-precision }}"
          INPUT="$INPUT-${{ hashFiles(inputs.custompy-path) }}-${{ hashFiles(inputs.icon-path) }}"

          echo "value=$(echo "$INPUT" | sha256sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

      - name: Cache the Godot export template
        id: export-template
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/dist
          key: export-template-${{ runner.os }}-${{ steps.export-template-cache-id.outputs.value }}

      - name: Cache the 'SCons' build directory
        id: scons-cache
        if: steps.export-template.outputs.cache-hit != 'true'
        uses: actions/cache@v4
        with:
          path: ${{ github.workspace }}/.scons
          key: scons-${{ runner.os }}-${{ hashFiles(inputs.godot-src-path) }}-${{ inputs.use-double-precision }}-${{ inputs.profile }}-${{ hashFiles(inputs.custompy-path) }}
          restore-keys: |
            scons-${{ runner.os }}-${{ hashFiles(inputs.godot-src-path) }}-${{ inputs.use-double-precision }}-${{ inputs.profile }}

      # ----------------------- Set up build workspace ----------------------- #

      - name: Clear output directory
        if: steps.export-template.outputs.cache-hit != 'true'
        run: rm -rf $GITHUB_WORKSPACE/godot/bin

      - name: Copy Godot source code into workspace
        if: |
          steps.export-template.outputs.cache-hit != 'true' &&
          inputs.godot-src-path != format('{0}/godot', github.workspace)
        run: cp -r ${{ inputs.godot-src-path }} $GITHUB_WORKSPACE/godot

      - name: Copy application icon into workspace
        if: |
          steps.export-template.outputs.cache-hit != 'true' &&
          inputs.icon-path != '' &&
          endswith(inputs.icon-path, '.ico') &&
          inputs.icon-path != format('{0}/godot/platform/windows/godot.ico')
        run: cp ${{ inputs.icon-path }} $GITHUB_WORKSPACE/godot/platform/windows/godot.ico

      - name: Copy application icon into workspace (converted)
        if: |
          steps.export-template.outputs.cache-hit != 'true' &&
          inputs.icon-path != '' &&
          !endsWith(inputs.icon-path, '.ico')
        uses: actions/download-artifact@v4
        with:
          name: godot.ico
          path: ${{ github.workspace }}/godot/platform/windows

      # --------------------- Compile the export template -------------------- #

      - name: Compile the export template
        if: steps.export-template.outputs.cache-hit != 'true'
        run: >
          SCONS_CACHE=$GITHUB_WORKSPACE/.scons
          SCRIPT_AES256_ENCRYPTION_KEY=${{ secrets.SCRIPT_AES256_ENCRYPTION_KEY }}

          python3 -m SCons

          -j$(nproc)
          -C $GITHUB_WORKSPACE/godot

          platform=windows arch=x86_64
          verbose=yes warnings=extra werror=yes

          $([[ ! -z "${{ inputs.custompy-path }}" ]] && echo "${{ inputs.custompy-path }}")
          $([[ "${{ inputs.use-double-precision }}" == 'true' ]] && echo "precision=double")

          $([[ "${{ inputs.profile }}" == "debug" ]] && echo target=template_debug dev_mode=yes debug_symbols=yes optimize=debug)
          $([[ "${{ inputs.profile }}" == "release_debug" ]] && echo target=template_debug dev_mode=yes debug_symbols=yes lto=full optimize=speed_trace)
          $([[ "${{ inputs.profile }}" == "release" ]] && echo target=template_release production=yes lto=full optimize=speed)

      # --------------------- Package the export template -------------------- #

      # Publish the artifacts
      - uses: actions/upload-artifact@v4
        with:
          name: "godot-${{ needs.godot-version.outputs.semver }}-template-windows-x86_64"
          path: "${{ github.workspace }}/bin/"
          if-no-files-found: error
