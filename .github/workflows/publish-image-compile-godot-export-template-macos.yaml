name: "🏗️ godot-infra: Build and publish the 'compile-godot-export-template' image for MacOS"

on:
  workflow_call:
    inputs:
      version:
        type: string
        description: "The image version to release."
        required: false
        default: v0.1.0 # x-release-please-version
      tags:
        type: string
        description: "A newline- or space-separated list of additional tags for the image."
        required: false
        default: macos-v0 # x-release-please-major
      llvm-version:
        type: string
        description: "The 'LLVM' version to install in the image."
        required: false
        default: "17"
      moltenvk-version:
        type: string
        description: "The 'MoltenVK' SDK version to install in the image."
        required: false
        default: "1.2.7"
      osx-version:
        type: string
        description: "The 'MacOS' SDK version to install in the image."
        required: false
        default: "14"
      osx-version-min:
        type: string
        description: "The minimum 'MacOS' SDK version to support."
        required: false
        default: "10.13"
      osxcross-sdk:
        type: string
        description: "The 'darwin*' SDK name for the 'osx-version' specified."
        required: false
        default: "darwin23"
      xcode-version:
        type: string
        description: "The 'Xcode' version to build 'macOS'-related SDKs with."
        required: false
        default: "15.2"
      timeout:
        type: number
        description: "The workflow's maximum allowed run duration (in minutes)."
        required: false
        default: 60
  workflow_dispatch:
    inputs:
      version:
        type: string
        description: "The version to release."
        required: true
      tags:
        type: string
        description: "A newline- or space-separated list of additional tags for the image."
        required: false
      llvm-version:
        type: string
        description: "The 'LLVM' version to install in the image."
        required: true
      moltenvk-version:
        type: string
        description: "The 'MoltenVK' SDK version to install in the image."
        required: true
      osx-version:
        type: string
        description: "The 'MacOS' SDK version to install in the image."
        required: true
      osx-version-min:
        type: string
        description: "The minimum 'MacOS' SDK version to support."
        required: true
      osxcross-sdk:
        type: string
        description: "The 'darwin*' SDK name for the 'osx-version' specified."
        required: true
      xcode-version:
        type: string
        description: "The 'Xcode' version to build 'macOS'-related SDKs with."
        required: true
      timeout:
        type: number
        description: "The workflow's maximum allowed run duration (in minutes)."
        required: false
        default: 60

permissions:
  contents: write
  packages: write

jobs:
  package-macos-sdk:
    uses: "./.github/workflows/package-macos-sdk.yml"
    secrets: "inherit"
    with:
      version: ${{ inputs.osx-version }}
      xcode-version: ${{ inputs.xcode-version }}

  package-moltenvk-sdk:
    uses: "./.github/workflows/package-moltenvk-sdk.yml"
    secrets: "inherit"
    with:
      version: ${{ inputs.moltenvk-version }}
      osx-version-min: ${{ inputs.osx-version-min }}
      xcode-version: ${{ inputs.xcode-version }}

  build-and-publish:
    needs: ["package-macos-sdk", "package-moltenvk-sdk"]

    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJson(inputs.timeout) }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Configure runner
        uses: ./.github/actions/setup-runner

      # --------------------------- Set up build contexts -------------------------- #

      # Extract macOS SDK
      - name: Download 'macOS' SDK artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package-macos-sdk.outputs.name }}
          path: "thirdparty/osxcross/tarballs"

      # Extract MoltenVK SDK
      - name: Download 'MoltenVK' SDK artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package-moltenvk-sdk.outputs.name }}

      - name: Copy 'MoltenVK' SDK into context
        run: tar -C thirdparty/moltenvk -xf ${{ needs.package-moltenvk-sdk.outputs.name }}

      # ------------------------------ Build the image ----------------------------- #

      - name: Set up 'podman'
        uses: ./.github/actions/setup-podman
        with:
          install-buildah: true
          install-podman: false
          login: true

      - uses: redhat-actions/buildah-build@v2
        id: build
        with:
          image: compile-godot-export-template
          containerfiles: .github/actions/compile-godot-export-template/macos/Dockerfile
          context: .github/actions/compile-godot-export-template/macos
          tags: >
            macos-${{ inputs.version }}
            ${{ inputs.tags }}
          layers: true
          extra-args: |
            --build-context osxcross=thirdparty/osxcross
            --build-context vulkan=thirdparty/moltenvk
            --cache-from ghcr.io/${{ github.repository_owner }}/compile-godot-export-template-cache
            --cache-to ghcr.io/${{ github.repository_owner }}/compile-godot-export-template-cache
            --cache-ttl 168h
            --disable-compression=false
            --platform linux/amd64
            --skip-unused-stages
            --squash
          build-args: |
            LLVM_VERSION=${{ inputs.llvm-version }}
            MACOS_VERSION=${{ inputs.osx-version }}
            MACOS_VERSION_MINIMUM=${{ inputs.osx-version-min }}
            OSXCROSS_SDK=${{ inputs.osxcross-sdk }}

      # Push the image to GHCR (Image Registry)
      - uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          image: ${{ steps.build.outputs.image }}
          tags: ${{ steps.build.outputs.tags }}
          registry: ghcr.io/${{ github.repository_owner }}
          username: ${{ github.actor }}
          password: ${{ github.token }}
          extra-args: |
            --disable-content-trust

      - name: Display 'push' outputs
        run: echo "${{ toJSON(steps.push.outputs) }}"

  # NOTE: In order to conserve package storage, remove all but the
  # latest versions of 'compile-godot-export-template'.
  remove-stale-packages:
    needs: ["build-and-publish"]

    runs-on: ubuntu-latest
    timeout-minutes: 4

    steps:
      # After publishing, delete older version(s) to save space.
      - uses: actions/delete-package-versions@v5
        with:
          owner: "coffeebeats"
          package-name: "compile-godot-export-template"
          package-type: "container"
          # NOTE: This can be revised if multiple versions per platform are needed.
          min-versions-to-keep: 1
          ignore-versions: ^(?!(?:(macos)))\w+\-[\w\.]+$

      - uses: actions/delete-package-versions@v5
        with:
          owner: "coffeebeats"
          package-name: "compile-godot-export-template-cache"
          package-type: "container"
          # This is arbitrary and can be revisited to save on or increase cache space.
          min-versions-to-keep: 50
