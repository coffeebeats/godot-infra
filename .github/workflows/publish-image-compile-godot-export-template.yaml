name: "🐳 Publish: 'compile-godot-export-template' image"

on:
  workflow_call:
    inputs:
      platform:
        type: string
        description: "The platform for which to build the image for."
        required: true
      godot-major-minor-version:
        type: string
        description: "The Godot major-minor version supported by the image."
        required: true
      force:
        type: boolean
        description: "Whether to rebuild the image without using cached layers."
        required: false
        default: false
      timeout:
        type: number
        description: "The workflow's maximum allowed run duration (in minutes)."
        required: false
        default: 60

      godot-angle-static-version:
        type: string
        description: "The 'godot-angle-static' release version to install in the image."
        required: false

      # MacOS-specific inputs.
      llvm-version:
        type: string
        description: "The 'LLVM' version to install in the image."
        required: false
      moltenvk-version:
        type: string
        description: "The 'MoltenVK' SDK version to install in the image."
        required: false
      osx-version:
        type: string
        description: "The 'MacOS' SDK version to install in the image."
        required: false
      osx-version-min:
        type: string
        description: "The minimum 'MacOS' SDK version to support."
        required: false
      osxcross-sdk:
        type: string
        description: "The 'darwin*' SDK name for the 'osx-version' specified."
        required: false
      xcode-version:
        type: string
        description: "The 'Xcode' version to build 'macOS'-related SDKs with."
        required: false

      # Web-specific inputs.
      emscripten-version:
        type: string
        description: "The 'Emscripten' SDK version to install in the image."
        required: false

      # Windows-specific inputs.
      mingw-llvm-version:
        type: string
        description: "The 'MinGW-LLVM' compiler version to install in the image."
        required: false
      godot-nir-static-version:
        type: string
        description: "The 'godot-nir-static' release version to install in the image."
        required: false
      pix-version:
        type: string
        description: "The PIX on Windows version to install in the image."
        required: false
      agility-version:
        type: string
        description: "The Agility SDK version to install in the image."
        required: false
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        description: "The platform for which to build the image for."
        default: "windows"
        required: true
        options:
          - "macos"
          - "web"
          - "windows"
      godot-major-minor-version:
        type: string
        description: "The Godot major-minor version supported by the image."
        required: true

      force:
        type: boolean
        description: "Whether to rebuild the image without using cached layers."
        required: false
        default: false
      timeout:
        type: number
        description: "The workflow's maximum allowed run duration (in minutes)."
        required: false
        default: 60

permissions:
  contents: write
  packages: write

jobs:
  # NOTE: This job exists just to allow defining default input values *once*,
  # regardless of whether an input is set for the workflow's event type.
  inputs:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    outputs:
      godot-angle-static-version: ${{ inputs.godot-angle-static-version || 'chromium/6601.2' }}

      # MacOS-specific inputs.

      llvm-version: ${{ inputs.llvm-version || '17' }}
      # IF/ELSE: Update the minimum macOS version if needed.
      moltenvk-version: ${{ inputs.moltenvk-version || '1.2.11' }}
      osx-version: ${{ inputs.osx-version || '15.2' }}
      # NOTE: MoltenVK requires at least macOS 10.15; see
      # https://github.com/KhronosGroup/MoltenVK/blob/v1.2.11/Docs/MoltenVK_Runtime_UserGuide.md#build-and-runtime-requirements.
      osx-version-min: ${{ inputs.osx-version-min || '10.15' }}
      osxcross-sdk: ${{ inputs.osxcross-sdk || 'darwin24.2' }}
      xcode-version: ${{ inputs.xcode-version || '16.2' }}

      # Web-specific inputs.

      # NOTE: This should match official build images; see
      # https://github.com/godotengine/build-containers/blob/main/Dockerfile.web#L4.
      emscripten-version: ${{ inputs.emscripten-version || '3.1.64' }}

      # Windows-specific inputs.

      # NOTE: These should match official build images; see
      # https://github.com/godotengine/godot/blob/4.4/misc/scripts/install_d3d12_sdk_windows.py.

      # FIXME(#342): Compiling ANGLE from source only works with LLVM-MinGW version '20240619' [1].
      # Despite Godot itself using a newer version [2], pin to older version for now.
      #
      # [1] https://github.com/godotengine/godot-angle-static/issues/15
      # [2] https://github.com/godotengine/build-containers/blob/6a0b8d51c3ddaf6e6c7e04d8851ac029459106be/Dockerfile.windows
      mingw-llvm-version: ${{ inputs.mingw-llvm-version || '20240619' }}
      godot-nir-static-version: ${{ inputs.godot-nir-static-version || '23.1.9-1' }} # https://github.com/godotengine/godot-build-scripts/blob/e2e01f05df785cfc3313a8d711e3371b39281bae/build.sh#L174-L176
      pix-version: ${{ inputs.pix-version || '1.0.240308001' }}
      agility-version: ${{ inputs.agility-version || '1.613.3' }}

    steps:
      - name: Placeholder step
        shell: bash
        run: exit 0

  package-macos-sdk:
    needs: ["inputs"]
    if: inputs.platform == 'macos'

    uses: ./.github/workflows/package-macos-sdk.yml
    secrets: "inherit"
    with:
      version: ${{ needs.inputs.outputs.osx-version }}
      xcode-version: ${{ needs.inputs.outputs.xcode-version }}

  package-moltenvk-sdk:
    needs: ["inputs"]
    if: inputs.platform == 'macos'

    uses: ./.github/workflows/package-moltenvk-sdk.yml
    secrets: "inherit"
    with:
      version: ${{ needs.inputs.outputs.moltenvk-version }}
      osx-version-min: ${{ needs.inputs.outputs.osx-version-min }}
      xcode-version: ${{ needs.inputs.outputs.xcode-version }}

  build-and-publish:
    if: |
      always() &&
      (
        needs.package-macos-sdk.result == 'success' ||
        (inputs.platform != 'macos' && needs.package-macos-sdk.result == 'skipped')
      ) ||
      (
        needs.package-moltenvk-sdk.result == 'success' ||
        (inputs.platform != 'macos' && needs.package-moltenvk-sdk.result == 'skipped')
      )

    needs: ["inputs", "package-macos-sdk", "package-moltenvk-sdk"]

    runs-on: ubuntu-latest
    timeout-minutes: ${{ fromJson(inputs.timeout) }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683
        with:
          submodules: ${{ inputs.platform == 'macos' }}

      - name: Configure runner
        if: inputs.platform == 'macos'
        uses: ./.github/actions/setup-runner

      # -------------------- Set up build contexts (MacOS) ------------------- #

      # Extract macOS SDK
      - name: Download 'macOS' SDK artifact
        if: inputs.platform == 'macos'
        uses: actions/cache/restore@5a3ec84eff668545956fd18022155c47e93e2684
        with:
          key: ${{ needs.package-macos-sdk.outputs.cache-key }}
          path: ${{ needs.package-macos-sdk.outputs.cache-path }}

      - name: Relocate 'macOS' SDK artifact
        if: inputs.platform == 'macos'
        run: >
          mv
          ${{ needs.package-macos-sdk.outputs.cache-path }}
          "thirdparty/osxcross/tarballs"

      # Extract MoltenVK SDK
      - name: Download 'MoltenVK' SDK artifact
        if: inputs.platform == 'macos'
        uses: actions/download-artifact@cc203385981b70ca67e1cc392babf9cc229d5806
        with:
          name: ${{ needs.package-moltenvk-sdk.outputs.name }}

      - name: Copy 'MoltenVK' SDK into context
        if: inputs.platform == 'macos'
        run: tar -C thirdparty/moltenvk -xf ${{ needs.package-moltenvk-sdk.outputs.name }}

      # Patch 'osxcross' to enable support for latest macos version.
      - name: Patch 'osxcross'
        if: inputs.platform == 'macos'
        working-directory: thirdparty/osxcross
        run: |
          curl -LO https://github.com/tpoechtrager/osxcross/pull/441.patch
          git apply 441.patch

      # ------------------------------ Build the image ----------------------------- #

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # MacOS

      - name: Build and push
        id: build-and-push-macos
        if: inputs.platform == 'macos'
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          context: compile-godot-export-template/macos
          push: true
          tags: ghcr.io/coffeebeats/compile-godot-export-template:godot-v${{ inputs.godot-major-minor-version }}-macos
          no-cache: ${{ inputs.force }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            LLVM_VERSION=${{ needs.inputs.outputs.llvm-version }}
            MACOS_VERSION=${{ needs.inputs.outputs.osx-version }}
            MACOS_VERSION_MINIMUM=${{ needs.inputs.outputs.osx-version-min }}
            OSXCROSS_SDK=${{ needs.inputs.outputs.osxcross-sdk }}
            GODOT_ANGLE_STATIC_VERSION=${{ needs.inputs.outputs.godot-angle-static-version }}
          build-contexts: |
            osxcross=thirdparty/osxcross
            vulkan=thirdparty/moltenvk

      - name: Display 'push' outputs
        if: inputs.platform == 'macos'
        run: echo "${{ toJSON(steps.build-and-push-macos.outputs.metadata) }}"

      # Web

      - name: Build and push
        id: build-and-push-web
        if: inputs.platform == 'web'
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          context: compile-godot-export-template/web
          push: true
          tags: ghcr.io/coffeebeats/compile-godot-export-template:godot-v${{ inputs.godot-major-minor-version }}-web
          no-cache: ${{ inputs.force }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            EMSCRIPTEN_SDK_VERSION=${{ needs.inputs.outputs.emscripten-version }}

      # Windows

      - name: Build and push
        id: build-and-push-windows
        if: inputs.platform == 'windows'
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4
        with:
          context: compile-godot-export-template/windows
          push: true
          tags: ghcr.io/coffeebeats/compile-godot-export-template:godot-v${{ inputs.godot-major-minor-version }}-windows
          no-cache: ${{ inputs.force }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            MINGW_LLVM_VERSION=${{ needs.inputs.outputs.mingw-llvm-version }}
            GODOT_NIR_STATIC_VERSION=${{ needs.inputs.outputs.godot-nir-static-version }}
            PIX_VERSION=${{ needs.inputs.outputs.pix-version }}
            AGILITY_VERSION=${{ needs.inputs.outputs.agility-version }}
            GODOT_ANGLE_STATIC_VERSION=${{ needs.inputs.outputs.godot-angle-static-version }}

      - name: Display 'push' outputs
        if: inputs.platform == 'windows'
        run: echo "${{ toJSON(steps.build-and-push-windows.outputs.metadata) }}"

  remove-stale-images:
    needs: ["build-and-publish"]
    if: |
      always() &&
      needs.build-and-publish.result == 'success'

    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55
        with:
          owner: "coffeebeats"
          package-name: "compile-godot-export-template"
          package-type: "container"
          delete-only-untagged-versions: true
          min-versions-to-keep: 25 # NOTE: This is an arbitrary value.
