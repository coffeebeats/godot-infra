name: "🐳 Publish: 'compile-godot-export-template' image"

on:
  workflow_call:
    inputs:
      platform:
        type: string
        description: "The platform for which to build the image for."
        required: true
      godot-major-minor-version:
        type: string
        description: "The Godot major-minor version supported by the image."
        required: true

      # MacOS-specific inputs.
      llvm-version:
        type: string
        description: "The 'LLVM' version to install in the image."
        required: false
      moltenvk-version:
        type: string
        description: "The 'MoltenVK' SDK version to install in the image."
        required: false
      osx-version:
        type: string
        description: "The 'MacOS' SDK version to install in the image."
        required: false
      osx-version-min:
        type: string
        description: "The minimum 'MacOS' SDK version to support."
        required: false
      osxcross-sdk:
        type: string
        description: "The 'darwin*' SDK name for the 'osx-version' specified."
        required: false
      xcode-version:
        type: string
        description: "The 'Xcode' version to build 'macOS'-related SDKs with."
        required: false

      # Web-specific inputs.
      emscripten-version:
        type: string
        description: "The 'Emscripten' SDK version to install in the image."
        required: false

      force:
        type: boolean
        description: "Whether to rebuild the image without using cached layers."
        required: false
        default: false
      timeout:
        type: number
        description: "The workflow's maximum allowed run duration (in minutes)."
        required: false
        default: 60
  workflow_dispatch:
    inputs:
      platform:
        type: choice
        description: "The platform for which to build the image for."
        default: "windows"
        required: true
        options:
          - "macos"
          - "web"
          - "windows"
      godot-major-minor-version:
        type: string
        description: "The Godot major-minor version supported by the image."
        required: true

      force:
        type: boolean
        description: "Whether to rebuild the image without using cached layers."
        required: false
        default: false
      timeout:
        type: number
        description: "The workflow's maximum allowed run duration (in minutes)."
        required: false
        default: 60

permissions:
  contents: write
  packages: write

jobs:
  # NOTE: This job exists just to allow defining default input values *once*,
  # regardless of whether an input is set for the workflow's event type.
  inputs:
    runs-on: ubuntu-latest
    timeout-minutes: 1

    outputs:
      # MacOS-specific inputs.

      llvm-version: ${{ inputs.llvm-version || '17' }}
      # IF/ELSE: Update the minimum macOS version if needed.
      moltenvk-version: ${{inputs.moltenvk-version || '1.2.11' }}
      osx-version: ${{ inputs.osx-version || '14.5' }}
      # NOTE: MoltenVK requires at least macOS 10.15; see
      # https://github.com/KhronosGroup/MoltenVK/blob/v1.2.11/Docs/MoltenVK_Runtime_UserGuide.md#build-and-runtime-requirements.
      osx-version-min: ${{ inputs.osx-version-min || '10.15' }}
      osxcross-sdk: ${{ inputs.osxcross-sdk || 'darwin23.5' }}
      xcode-version: ${{ inputs.xcode-version || '15.4' }}

      # Web-specific inputs.

      # NOTE: This should match official build images; see
      # https://github.com/godotengine/build-containers/blob/main/Dockerfile.web#L4.
      emscripten-version: ${{ inputs.emscripten-version || '3.1.64' }}

    steps:
      - name: Placeholder step
        shell: bash
        run: exit 0

  package-macos-sdk:
    needs: ["inputs"]
    if: inputs.platform == 'macos'

    uses: "./.github/workflows/package-macos-sdk.yml"
    secrets: "inherit"
    with:
      version: ${{ needs.inputs.outputs.osx-version }}
      xcode-version: ${{ needs.inputs.outputs.xcode-version }}

  package-moltenvk-sdk:
    needs: ["inputs"]
    if: inputs.platform == 'macos'

    uses: "./.github/workflows/package-moltenvk-sdk.yml"
    secrets: "inherit"
    with:
      version: ${{ needs.inputs.outputs.moltenvk-version }}

  build-and-publish:
    if: |
      always() &&
      (
        needs.package-macos-sdk.result == 'success' ||
        (inputs.platform != 'macos' && needs.package-macos-sdk.result == 'skipped')
      ) ||
      (
        needs.package-moltenvk-sdk.result == 'success' ||
        (inputs.platform != 'macos' && needs.package-moltenvk-sdk.result == 'skipped')
      )

    needs: ["inputs", "package-macos-sdk", "package-moltenvk-sdk"]

    runs-on: ubuntu-latest
    # NOTE: There is a limit of 10 inputs for workflow dispatch, so just set
    # this to a reasonable limit.
    timeout-minutes: ${{ github.event_name == 'workflow_dispatch' && 60 || fromJson(inputs.timeout) }}

    defaults:
      run:
        shell: bash

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: ${{ inputs.platform == 'macos' }}

      - name: Configure runner
        if: inputs.platform == 'macos'
        uses: ./.github/actions/setup-runner

      # -------------------- Set up build contexts (MacOS) ------------------- #

      # Extract macOS SDK
      - name: Download 'macOS' SDK artifact
        if: inputs.platform == 'macos'
        uses: actions/cache/restore@v4
        with:
          key: ${{ needs.package-macos-sdk.outputs.cache-key }}
          path: ${{ needs.package-macos-sdk.outputs.cache-path }}

      - name: Relocate 'macOS' SDK artifact
        if: inputs.platform == 'macos'
        run: >
          mv
          ${{ needs.package-macos-sdk.outputs.cache-path }}
          "thirdparty/osxcross/tarballs"

      # Extract MoltenVK SDK
      - name: Download 'MoltenVK' SDK artifact
        if: inputs.platform == 'macos'
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.package-moltenvk-sdk.outputs.name }}

      - name: Copy 'MoltenVK' SDK into context
        if: inputs.platform == 'macos'
        run: tar -C thirdparty/moltenvk -xf ${{ needs.package-moltenvk-sdk.outputs.name }}

      # ------------------------------ Build the image ----------------------------- #

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ github.token }}

      # MacOS

      - name: Build and push
        id: build-and-push-macos
        if: inputs.platform == 'macos'
        uses: docker/build-push-action@v6
        with:
          context: compile-godot-export-template/macos
          push: true
          tags: ghcr.io/coffeebeats/compile-godot-export-template:godot-v${{ inputs.godot-major-minor-version }}-macos
          no-cache: ${{ inputs.force }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            LLVM_VERSION=${{ needs.inputs.outputs.llvm-version }}
            MACOS_VERSION=${{ needs.inputs.outputs.osx-version }}
            MACOS_VERSION_MINIMUM=${{ needs.inputs.outputs.osx-version-min }}
            OSXCROSS_SDK=${{ needs.inputs.outputs.osxcross-sdk }}
          build-contexts: |
            osxcross=thirdparty/osxcross
            vulkan=thirdparty/moltenvk

      - name: Display 'push' outputs
        if: inputs.platform == 'macos'
        run: echo "${{ toJSON(steps.build-and-push-macos.outputs.metadata) }}"

      # Web

      - name: Build and push
        id: build-and-push-web
        if: inputs.platform == 'web'
        uses: docker/build-push-action@v6
        with:
          context: compile-godot-export-template/web
          push: true
          tags: ghcr.io/coffeebeats/compile-godot-export-template:godot-v${{ inputs.godot-major-minor-version }}-web
          no-cache: ${{ inputs.force }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            EMSCRIPTEN_SDK_VERSION=${{ needs.inputs.outputs.emscripten-version }}

      # Windows

      - name: Build and push
        id: build-and-push-windows
        if: inputs.platform == 'windows'
        uses: docker/build-push-action@v6
        with:
          context: compile-godot-export-template/windows
          push: true
          tags: ghcr.io/coffeebeats/compile-godot-export-template:godot-v${{ inputs.godot-major-minor-version }}-windows
          no-cache: ${{ inputs.force }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64

      - name: Display 'push' outputs
        if: inputs.platform == 'windows'
        run: echo "${{ toJSON(steps.build-and-push-windows.outputs.metadata) }}"

  remove_stale_packages:
    needs: ["build-and-publish"]

    runs-on: ubuntu-latest
    timeout-minutes: 4

    steps:
      - uses: actions/delete-package-versions@v5
        with:
          owner: "coffeebeats"
          package-name: "compile-godot-export-template"
          package-type: "container"
          delete-only-untagged-versions: true
          min-versions-to-keep: 25 # NOTE: This is an arbitrary value.
