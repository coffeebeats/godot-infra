name: "🏗️ Compile: Godot export template (MacOS)"
description: "Compiles a Godot export template for the MacOS platform."

inputs:
  arch:
    description: "The target architecture to build the export template for."
    required: true
  encryption-key:
    description: "A Godot script encryption key to embed within the export template."
    required: false
  use-double-precision:
    description: "Whether to enable double precision for the export template."
    required: false
    default: false
  profile:
    description: "The optimization profile of the compiled export template."
    required: false
    default: release
  lipo:
    description: "Whether to use 'lipo' to assemble an export template targeting a 'universal' architecture."
    required: false
    default: false
  app-bundle:
    description: "Whether to create an app bundle for the export template."
    required: false
    default: false
  godot-src-path:
    description: "A path, relative to 'github.workspace', where the Godot source code is located."
    required: false
    default: "."
  scons-cache-path:
    description: "A path, relative to 'github.workspace', where the SCons cache is located."
    required: false
    default: ".scons"

runs:
  using: docker
  image: docker://ghcr.io/coffeebeats/compile-godot-export-template:godot-v4.4-macos
  env:
    # NOTE: It's unclear why 'arm64' builds fail using this toolchain setup (is Godot
    # not cross-compiled regularly?). Disabling the 'c99-designator' warning unblocks
    # builds for now. Note that multiple 'ccflags' cannot be passed in via 'SCONSFLAGS',
    # so pass it in via a command line argument.
    CCFLAGS: "-Wno-ordered-compare-function-pointers -Wno-c99-designator"
  args:
    - /bin/bash
    - -c
    # NOTE: Enable 'extglob' to support simpler deletion of compilation artifacts.
    - -O
    - extglob
    # NOTE: Any extra new-lines contained in this string will be executed as the
    # start of a new command.
    - >-
      if [[ ! -z "${{ inputs.encryption-key }}" ]]; then
      SCRIPT_AES256_ENCRYPTION_KEY=${{ inputs.encryption-key }};
      fi

      scons
      -j$(nproc)
      -C ${{ inputs.godot-src-path }}
      cache_path=/github/workspace/${{ inputs.scons-cache-path }}
      arch=${{ inputs.arch }}
      verbose=yes warnings=extra werror=yes
      ccflags="$CCFLAGS"
      $([[ "${{ inputs.use-double-precision }}" == 'true' ]] && echo "precision=double")
      $([[ "${{ inputs.profile }}" == "debug" ]] && echo target=template_debug debug_symbols=yes optimize=debug)
      $([[ "${{ inputs.profile }}" == "release_debug" ]] && echo target=template_debug production=yes debug_symbols=yes optimize=speed_trace)
      $([[ "${{ inputs.profile }}" == "release" ]] && echo target=template_release production=yes optimize=speed)

      export
      PATH_SRC=${{ inputs.godot-src-path }}
      TEMPLATE_NAME=godot.macos.template_$([[ "${{ inputs.profile }}" == "release" ]] && echo "release" || echo "debug")$([[ "${{ inputs.use-double-precision }}" == 'true' ]] && echo ".double").$([[ "${{ inputs.lipo }}" == "true" ]] && echo "universal" || echo ${{ inputs.arch }})

      [[ "${{ inputs.lipo }}" == "true" ]] &&
      echo "Creating export template with 'universal' architecture from the following inputs:" &&
      ls -ls $PATH_SRC/bin &&
      lipo
      -create $PATH_SRC/bin/godot.macos.*
      -output $PATH_SRC/bin/$TEMPLATE_NAME &&
      rm $PATH_SRC/bin/godot.*[!universal] ||
      :

      [[ "${{ inputs.app-bundle }}" == "true" ]] &&
      echo "Creating MacOS application bundle 'macos.zip' from template: $TEMPLATE_NAME" &&
      cp -r $PATH_SRC/misc/dist/macos_template.app $PATH_SRC/bin &&
      mkdir -p $PATH_SRC/bin/macos_template.app/Contents/MacOS &&
      cp $PATH_SRC/bin/$TEMPLATE_NAME $PATH_SRC/bin/macos_template.app/Contents/MacOS/godot_macos_$([[ "${{ inputs.profile }}" == "release" ]] && echo "release" || echo "debug").universal &&
      chmod +x $PATH_SRC/bin/macos_template.app/Contents/MacOS/godot_macos* &&
      (cd $PATH_SRC/bin && zip -9 -r macos.zip macos_template.app) &&
      rm -rf $PATH_SRC/bin/*.!(zip) ||
      :
