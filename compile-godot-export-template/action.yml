name: "🏗️ Compile: Godot export template"
description: "Compiles a Godot export template for the specified platform."

inputs:
  godot-src-path:
    description: "A path to the Godot source code."
    required: true

  arch:
    description: "The target architecture of the export template."
    required: true
  platform:
    description: "The target platform of the export template."
    required: true

  encryption-key:
    description: "A Godot script encryption key to embed within the export template."
    required: false
  custompy-path:
    description: "A path to a 'custom.py' file containing template build options."
    required: false
  use-double-precision:
    description: "Whether to enable double precision for the export template."
    required: false
    default: false
  profile:
    description: "The optimization profile of the compiled export template."
    required: false
    default: release

  # MacOS-specific inputs.
  # ...

  # Windows-specific inputs.
  icon-path:
    description: "A path to an application icon (only used on Windows)."
    required: false

outputs:
  name:
    description: "The file name of the compiled export template."
    value: ${{ steps.compiled-artifact.outputs.name }}
  path:
    description: "The path to the compiled export template artifact."
    value: ${{ github.workspace }}/godot/bin/${{ steps.compiled-artifact.outputs.name }}

runs:
  using: composite

  steps:
    - name: Copy the Godot source code to the expected location
      shell: bash
      run: |
        if [[ $(realpath "${{ inputs.godot-src-path }}") == $(realpath "${{ github.workspace }}/godot") ]]; then
          echo "Godot source code already located at target directory; exiting without making changes."
          exit 0
        fi

        cp -r ${{ inputs.godot-src-path }} ${{ github.workspace }}/godot
        echo "Copied Godot source code to target directory: ${{ github.workspace }}/godot"

    # -------------- Restore the export template + SCons caches -------------- #

    # NOTE: This is required so as to avoid leaking the encryption key.
    - name: Determine Godot export template cache ID
      id: export-template-cache-id
      shell: bash
      run: |
        INPUT="${{ inputs.platform }}-${{ inputs.arch }}-${{ hashFiles(format('{0}/godot', github.workspace)) }}"
        INPUT="$INPUT-${{ inputs.profile }}-${{ inputs.encryption-key }}-${{ inputs.use-double-precision }}"
        INPUT="$INPUT-${{ hashFiles(inputs.custompy-path) }}-${{ hashFiles(inputs.icon-path) }}"

        echo "value=$(echo "$INPUT" | sha256sum | cut -d ' ' -f 1)" >> $GITHUB_OUTPUT

    - name: Cache the Godot export template
      id: export-template
      uses: actions/cache@v4
      with:
        # NOTE: This path must match the one expected by the container action.
        path: ${{ github.workspace }}/godot/bin
        key: export-template-${{ runner.os }}-${{ steps.export-template-cache-id.outputs.value }}

    - name: Cache the 'SCons' build directory
      if: steps.export-template.outputs.cache-hit != 'true'
      uses: actions/cache@v4
      with:
        # NOTE: This path must match the one expected by the container action.
        path: ${{ github.workspace }}/.scons
        key: scons-${{ runner.os }}-${{ inputs.platform }}-${{ inputs.arch }}-${{ inputs.profile }}-${{ inputs.use-double-precision }}-${{ hashFiles(inputs.godot-src-path) }}-${{ hashFiles(inputs.custompy-path) }}
        restore-keys: |
          scons-${{ runner.os }}-${{ inputs.platform }}-${{ inputs.arch }}-${{ inputs.profile }}-${{ inputs.use-double-precision }}-${{ hashFiles(inputs.godot-src-path) }}-

    # ------------------------ Set up build workspace ------------------------ #

    - name: Clear output directory
      if: steps.export-template.outputs.cache-hit != 'true'
      shell: bash
      run: rm -rf $GITHUB_WORKSPACE/godot/bin

    - name: Copy 'custom.py' into Godot source code directory
      if: |
        inputs.custompy-path != '' &&
        steps.export-template.outputs.cache-hit != 'true'
      shell: bash
      run: cp ${{ inputs.custompy-path }} ${{ github.workspace }}/godot/custom.py

    - name: Copy icon into Godot source code directory
      if: |
        inputs.icon-path != '' &&
        inputs.platform == 'windows' &&
        steps.export-template.outputs.cache-hit != 'true'
      shell: bash
      run: |
        ICON_PATH="${{ inputs.icon-path }}"
        if [[ "${{ endsWith(inputs.icon-path, '.ico') }}" != "true" ]]; then
          ICON_PATH=${{ runner.temp }}/godot.ico
          convert -background transparent ${{ inputs.icon-path }} -define icon:auto-resize=256,128,64,48,32,16 $ICON_PATH
        fi

        cp $ICON_PATH ${{ github.workspace }}/godot/platform/windows/godot.ico

    # ---------------------- Compile the export template --------------------- #

    # MacOS

    # TODO: 'universal' builds cannot take advantage of 'x86_64'/'arm64'-
    # specific caches. Consider restructuring, but this is unlikely to be an
    # issue in practice because 'universal' is by far the most common arch.

    - name: Compile the export template (MacOS - x86_64)
      if: |
        inputs.platform == 'macos' &&
        (inputs.arch == 'x86_64' || inputs.arch == 'universal') &&
        steps.export-template.outputs.cache-hit != 'true'
      uses: "coffeebeats/godot-infra/compile-godot-export-template/macos@v0"
      with:
        app-bundle: ${{ inputs.arch == 'x86_64' }}
        arch: x86_64
        encryption-key: ${{ inputs.encryption-key }}
        godot-src-path: godot
        profile: ${{ inputs.profile }}
        use-double-precision: ${{ inputs.use-double-precision }}

    - name: Compile the export template (MacOS - arm64+universal)
      if: |
        inputs.platform == 'macos'  &&
        (inputs.arch == 'arm64' || inputs.arch == 'universal') &&
        steps.export-template.outputs.cache-hit != 'true'
      uses: "coffeebeats/godot-infra/compile-godot-export-template/macos@v0"
      with:
        app-bundle: true
        arch: arm64
        encryption-key: ${{ inputs.encryption-key }}
        godot-src-path: godot
        lipo: ${{ inputs.arch == 'universal' }}
        profile: ${{ inputs.profile }}
        use-double-precision: ${{ inputs.use-double-precision }}

    # Windows

    - name: Compile the export template (Windows - x86_64)
      if: |
        inputs.platform == 'windows' &&
        steps.export-template.outputs.cache-hit != 'true'
      uses: "coffeebeats/godot-infra/compile-godot-export-template/windows@v0"
      with:
        arch: ${{ inputs.arch }}
        encryption-key: ${{ inputs.encryption-key }}
        godot-src-path: godot
        profile: ${{ inputs.profile }}
        use-double-precision: ${{ inputs.use-double-precision }}

    # ---------------------- Inspect compiled artifacts ---------------------- #

    - name: Inspect compiled artifacts
      shell: bash
      run: ls -ls $GITHUB_WORKSPACE/godot/bin

    - name: Determine export template file name
      id: compiled-artifact
      shell: bash
      run: |
        if [[ "${{ inputs.platform }}" == "macos" ]]; then
          echo "name=macos.zip" >> $GITHUB_OUTPUT
          exit 0
        fi

        TARGET=$([[ "${{ inputs.profile }}" == "release" ]] && echo template_release || echo template_debug)
        DOUBLE=$([[ "${{ inputs.use-double-precision }}" == "true" ]] && echo ".double" || :)

        echo "name=godot.${{ inputs.platform }}.${TARGET}${DOUBLE}.${{ inputs.arch }}.exe" >> $GITHUB_OUTPUT
