name: "🏗️ Compile: Godot export template"
description: "Compiles a Godot export template for the specified platform."

inputs:
  godot-src-rev:
    type: string
    description: "The revision/tag name in the 'godot-src-repository' to check out."
    required: true
  godot-src-repository:
    type: string
    description: "The name of a repository containing the Godot source code."
    required: false
    default: godotengine/godot
  godot-patches:
    description: "A comma or newline-delimited list of glob patterns to patch files."
    required: false

  arch:
    description: "The target CPU architecture to compile for."
    required: true
  platform:
    description: "The target platform to compile for."
    required: true
  compile-editor: # TODO: Refactor and rename this action to fully support any target.
    description: "Whether to compile an editor build instead of an export template."
    required: false
    default: false

  encryption-key:
    description: "A Godot script encryption key to embed within the export template."
    required: false
  custompy-path:
    description: "A path to a 'custom.py' file containing template build options."
    required: false
  use-double-precision:
    description: "Whether to enable double precision for the export template."
    required: false
    default: false
  profile:
    description: "The optimization profile of the compiled export template."
    required: false
    default: release

  # MacOS-specific inputs.
  # ...

  # Web-specific inputs.
  enable-javascript-eval:
    description: "Whether to expose the JavaScript singleton to the engine."
    required: false
    default: false
  enable-gdextension:
    description: "Whether to enable support for GDExtensions (degrades performance/compatibility)."
    required: false
    default: false

  # Windows-specific inputs.
  icon-path:
    description: "A path to an application icon (only used on Windows)."
    required: false

  publish:
    description: "Whether to publish an artifact to the workflow."
    required: false
    default: false
  artifact-name:
    description: "The uploaded artifact's name (only used if 'publish' is 'true')."
    required: false

outputs:
  export-template-filename: # TODO: Change this name to reflect output could be an editor build.
    description: "The filename of the export template, relative to 'path-artifact-dir'."
    value: ${{ steps.artifact.outputs.template }}
  path-artifact-dir:
    description: "The path to the directory containing compiled export template artifacts."
    value: ${{ steps.artifact.outputs.dir }}
  extra-bundled-files:
    description: "A space-delimited list of file patterns, relative to 'path-artifact-dir', to include alongside the final game artifact."
    value: ${{ steps.bundle.outputs.paths }}

runs:
  using: composite

  steps:
    # ---------------------------- Validate inputs --------------------------- #

    - name: Verify common build inputs
      shell: bash
      run: |-
        case "${{ inputs.profile }}" in
          debug|release_rebug|release) ;;
          *)
            echo "Unrecognize optimization profile: ${{ inputs.profile }}"
            exit 1
            ;;
        esac

    - name: Verify 'editor' build inputs
      if: inputs.compile-editor == 'true'
      shell: bash
      run: |-
        if [[ "${{ inputs.platform }}" == "web" ]]; then
          echo "Invalid input; cannot compile an editor for platform: 'web'"
          exit 1
        fi

        if [[ ! -z "${{ inputs.encryption-key }}" ]]; then
          echo "Invalid input; cannot encrypt an editor build"
          exit 1
        fi

        if [[ ! -z "${{ inputs.custompy-path }}" ]]; then
          echo "Invalid input; cannot specify a custom.py file for an editor build"
          exit 1
        fi

    # --------------------- Vendor the Godot source code --------------------- #

    - uses: coffeebeats/godot-infra/.github/actions/install-godot-source@v2
      with:
        dst-path: ${{ github.workspace }}/godot
        godot-src-rev: ${{ inputs.godot-src-rev }}
        godot-src-repository: ${{ inputs.godot-src-repository }}
        godot-patches: ${{ inputs.godot-patches }}

    - name: Parse Godot source code version
      uses: "coffeebeats/godot-infra/.github/actions/parse-godot-version@v2"
      with:
        versionpy-path: ${{ github.workspace }}/godot/version.py
        minimum-major-version: 4
        minimum-minor-version: 3
        minimum-patch-version: 0

    - name: Remove editor-related source code
      if: inputs.compile-editor != 'true'
      shell: bash
      run: "rm -rf ${{ github.workspace }}/godot/editor"

    # --------------- Restore the build artifact + SCons caches -------------- #

    # NOTE: This is required so as to avoid leaking the encryption key.
    - name: Determine Godot build artifact cache ID
      id: godot-cache-key
      shell: bash
      run: |
        INPUT="${{ inputs.platform }}-${{ inputs.arch }}-${{ hashFiles(format('{0}/godot', github.workspace)) }}-${{ inputs.compile-editor }}"
        INPUT="$INPUT-${{ inputs.profile }}-${{ inputs.encryption-key }}-${{ inputs.use-double-precision }}"
        INPUT="$INPUT-${{ hashFiles(inputs.custompy-path) }}-${{ hashFiles(inputs.icon-path) }}"

        VALUE="compile-godot-export-template-godot-${{ runner.os }}-$(echo "$INPUT" | sha256sum | cut -d ' ' -f 1)"

        echo "value=$VALUE" >> $GITHUB_OUTPUT

    - name: Validate build directories don't exist
      shell: bash
      run: |
        if [[ -d "${{ github.workspace }}/build" ]]; then
          echo "Unexpectedly found build directory."
          exit 1
        fi

        if [[ -d "${{ github.workspace }}/.scons" ]]; then
          echo "Unexpectedly found SCons cache directory."
          exit 1
        fi

    - name: Cache the Godot build artifact
      id: godot-cache
      uses: actions/cache@v4
      with:
        # NOTE: This path must match the one expected by the container action.
        # IF/ELSE: Update the 'save' step below if this changes.
        path: ${{ github.workspace }}/build
        key: ${{ steps.godot-cache-key.outputs.value }}

    - name: Inspect restored artifacts
      if: steps.godot-cache.outputs.cache-hit == 'true'
      shell: bash
      run: tree -lha --dirsfirst $GITHUB_WORKSPACE/build

    - name: Cache the 'SCons' build directory
      if: steps.godot-cache.outputs.cache-hit != 'true'
      uses: actions/cache@v4
      with:
        # NOTE: This path must match the one expected by the container action.
        path: ${{ github.workspace }}/.scons
        key: compile-godot-export-template-scons-${{ runner.os }}-${{ inputs.platform }}-${{ inputs.arch }}-${{ inputs.profile }}-${{ inputs.use-double-precision }}-${{ hashFiles(inputs.godot-src-path) }}-${{ inputs.compile-editor }}-${{ hashFiles(inputs.custompy-path) }}
        restore-keys: |
          compile-godot-export-template-scons-${{ runner.os }}-${{ inputs.platform }}-${{ inputs.arch }}-${{ inputs.profile }}-${{ inputs.use-double-precision }}-${{ hashFiles(inputs.godot-src-path) }}-${{ inputs.compile-editor }}-
          compile-godot-export-template-scons-${{ runner.os }}-${{ inputs.platform }}-${{ inputs.arch }}-${{ inputs.profile }}-${{ inputs.use-double-precision }}-${{ hashFiles(inputs.godot-src-path) }}-

    # ------------------------ Set up build workspace ------------------------ #

    - name: Clear output directory
      if: steps.godot-cache.outputs.cache-hit != 'true'
      shell: bash
      run: rm -rf $GITHUB_WORKSPACE/godot/bin

    - name: Copy 'custom.py' into Godot source code directory
      if: |
        inputs.compile-editor != 'true' &&
        inputs.custompy-path != '' &&
        steps.godot-cache.outputs.cache-hit != 'true'
      shell: bash
      run: cp ${{ inputs.custompy-path }} ${{ github.workspace }}/godot/custom.py

    - name: Copy icon into Godot source code directory
      if: |
        inputs.compile-editor != 'true' &&
        inputs.icon-path != '' &&
        inputs.platform == 'windows' &&
        steps.godot-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        ICON_PATH="${{ inputs.icon-path }}"
        if [[ "${{ endsWith(inputs.icon-path, '.ico') }}" != "true" ]]; then
          # NOTE: As of ubuntu-22.04, GitHub runner images don't contain ImageMagick
          # by default [1]. Install that prior to creating the icon.
          #
          # [1] https://github.com/actions/runner-images/issues/10772
          sudo apt-get update -y
          sudo apt-get install -y imagemagick
          convert -version

          ICON_PATH=${{ runner.temp }}/godot.ico
          convert -background transparent ${{ inputs.icon-path }} -define icon:auto-resize=256,128,64,48,32,16 $ICON_PATH
        fi

        cp $ICON_PATH ${{ github.workspace }}/godot/platform/windows/godot.ico

    # ----------------------------- Compile Godot ---------------------------- #

    - name: Determine compile target
      id: target
      shell: bash
      run: |
        if [[ "${{ inputs.compile-editor }}" == "true" ]]; then
          TARGET="editor"
        elif [[ "${{ inputs.profile }}" == "release" ]]; then
          TARGET="template_release"
        else
          TARGET="template_debug"
        fi

        echo "value=$TARGET" >> "$GITHUB_OUTPUT"

    # MacOS

    # TODO: 'universal' builds cannot take advantage of 'x86_64'/'arm64'-
    # specific caches. Consider restructuring, but this is unlikely to be an
    # issue in practice because 'universal' is by far the most common arch.

    - name: Compile the export template (MacOS - x86_64)
      if: |
        inputs.platform == 'macos' &&
        (inputs.arch == 'x86_64' || inputs.arch == 'universal') &&
        steps.godot-cache.outputs.cache-hit != 'true'
      uses: "coffeebeats/godot-infra/compile-godot-export-template/macos@v2"
      with:
        app-bundle: ${{ inputs.arch == 'x86_64' }}
        arch: x86_64
        encryption-key: ${{ inputs.encryption-key }}
        godot-src-path: godot
        profile: ${{ inputs.profile }}
        target: ${{ steps.target.outputs.value }}
        use-double-precision: ${{ inputs.use-double-precision }}

    - name: Compile the export template (MacOS - arm64+universal)
      if: |
        inputs.platform == 'macos'  &&
        (inputs.arch == 'arm64' || inputs.arch == 'universal') &&
        steps.godot-cache.outputs.cache-hit != 'true'
      uses: "coffeebeats/godot-infra/compile-godot-export-template/macos@v2"
      with:
        app-bundle: true
        arch: arm64
        encryption-key: ${{ inputs.encryption-key }}
        godot-src-path: godot
        lipo: ${{ inputs.arch == 'universal' }}
        profile: ${{ inputs.profile }}
        target: ${{ steps.target.outputs.value }}
        use-double-precision: ${{ inputs.use-double-precision }}

    # Web

    - name: Compile the export template (Web - wasm32)
      if: |
        inputs.compile-editor != 'true' &&
        inputs.platform == 'web' &&
        steps.godot-cache.outputs.cache-hit != 'true'
      uses: "coffeebeats/godot-infra/compile-godot-export-template/web@v2"
      with:
        arch: ${{ inputs.arch }}
        enable-gdextension: ${{ inputs.enable-gdextension }}
        enable-javascript-eval: ${{ inputs.enable-javascript-eval }}
        encryption-key: ${{ inputs.encryption-key }}
        godot-src-path: godot
        profile: ${{ inputs.profile }}
        target: ${{ steps.target.outputs.value }}
        use-double-precision: ${{ inputs.use-double-precision }}

    # Windows

    - name: Compile the export template (Windows - x86_64)
      if: |
        inputs.platform == 'windows' &&
        steps.godot-cache.outputs.cache-hit != 'true'
      uses: "coffeebeats/godot-infra/compile-godot-export-template/windows@v2"
      with:
        arch: ${{ inputs.arch }}
        encryption-key: ${{ inputs.encryption-key }}
        godot-src-path: godot
        profile: ${{ inputs.profile }}
        target: ${{ steps.target.outputs.value }}
        use-double-precision: ${{ inputs.use-double-precision }}

    # ---------------------- Inspect compiled artifacts ---------------------- #

    - name: Check for compilation artifacts
      if: steps.godot-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |-
        if [[ ! -d "$GITHUB_WORKSPACE/godot/bin" || -z "$(ls -A "$GITHUB_WORKSPACE/godot/bin")" ]]; then
          echo "No compilation artifacts found in directory: $GITHUB_WORKSPACE/godot/bin"
          exit 1
        fi

    - name: Move compiled artifacts
      if: steps.godot-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |-
        if [[ -d "$GITHUB_WORKSPACE/build" ]]; then
          echo "Unexpectedly found output directory: $GITHUB_WORKSPACE/build"
          exit 1
        fi

        sudo mv $GITHUB_WORKSPACE/godot/bin $GITHUB_WORKSPACE/build

    - name: Inspect compiled artifacts
      shell: bash
      run: tree -lha --dirsfirst $GITHUB_WORKSPACE/build

    - name: Clean up Godot source code
      shell: bash
      run: sudo rm -rf $GITHUB_WORKSPACE/godot

    # Save the export template cache (ahead of artifact steps). Note that this
    # ensures progress is saved even if later steps fail.
    - uses: actions/cache/save@v3
      if: steps.godot-cache.outputs.cache-hit != 'true'
      with:
        # IF/ELSE: Update the 'cache' step above if this changes.
        path: ${{ github.workspace }}/build
        key: ${{ steps.godot-cache-key.outputs.value }}

    # ---------------------- Publish generated artifacts --------------------- #

    - name: Determine file name
      id: artifact
      shell: bash
      run: |
        TARGET="${{ steps.target.outputs.value }}"

        case "${{ inputs.platform }}" in
          macos)
            case "$TARGET" in
              editor) TEMPLATE_NAME="godot_macos_editor.app" ;;
              *) TEMPLATE_NAME="godot_macos.zip" ;;
            esac
            ;;
          web)
            PROFILE=$([[ "${{ inputs.profile }}" == release ]] && echo release || echo debug)
            DLINK=$([[ "${{ inputs.enable-gdextension }}" == true ]] && echo _dlink || :)
            TEMPLATE_NAME="web${DLINK}_${PROFILE}.zip"
            ;;
          windows)
            DOUBLE=${{ inputs.use-double-precision == 'true' && '.double' || '' }}
            TEMPLATE_NAME="godot.${{ inputs.platform }}.${{ steps.target.outputs.value }}${DOUBLE}.${{ inputs.arch }}.llvm.exe"
            ;;
          *)
            echo "Unknown/unsupported platform: ${{ inputs.platform }}"
            exit 1
        esac

        TEMPLATE_PATH="$GITHUB_WORKSPACE/build/$TEMPLATE_NAME"
        if [[ 
          ( "$TARGET" == "editor" && ! -d "$TEMPLATE_PATH" ) || \
          ( "$TARGET" != "editor" && ! -f "$TEMPLATE_PATH" ) ]]; then
          echo "Invalid export template filename; no file found: '$TEMPLATE_PATH'"
          exit 1
        fi

        ARTIFACT_NAME="${{ inputs.artifact-name }}"
        if [[ -z "$ARTIFACT_NAME" ]]; then
          ARTIFACT_NAME="godot-${TARGET%_*}-${{ inputs.arch }}-${{ inputs.platform }}-${{ inputs.profile }}"
        fi

        echo "name=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "dir=$GITHUB_WORKSPACE/build" >> $GITHUB_OUTPUT
        echo "template=$TEMPLATE_NAME" >> $GITHUB_OUTPUT

    - name: Set 'extra-bundled-files' output
      id: bundle
      shell: bash
      run: |
        case "${{ inputs.platform }}" in
          macos) ;;
          web) ;;
          windows)
            # NOTE: The editor is not compiled with the Agility SDK.
            if [[ "${{ inputs.compile-editor }}" != "true" ]]; then
              echo paths="D3D12Core.dll d3d12SDKLayers.dll" >> "$GITHUB_OUTPUT"
            fi

            ;;
          *)
            echo "Unknown/unsupported platform: ${{ inputs.platform }}"
            exit 1
        esac

    - uses: actions/upload-artifact@v4
      if: inputs.publish == 'true'
      with:
        name: ${{ steps.artifact.outputs.name }}
        path: ${{ github.workspace }}/build/
        if-no-files-found: error
