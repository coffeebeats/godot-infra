name: "ðŸ¤– Export: Godot project export preset"
description: "Exports a Godot project export preset for the specified platform."

inputs:
  preset-name:
    description: "The name of the Godot project export preset."
    required: true

  project-path:
    description: "The path to the Godot project."
    required: false
    default: "."
  godot-editor-version:
    type: string
    description: "The full semantic version of the Godot editor."
    required: true
  export-template-path:
    description: "The path to the Godot export template."
    required: true
  extra-bundled-files:
    description: "A comma or newline-delimited list of file patterns to include alongside the final game artifact."
    required: false

  pck-only:
    description: "Whether to export a PCK file instead of an executable."
    required: false
    default: false
  profile:
    description: "The optimization profile of the compiled export template."
    required: false
    default: release
  encryption-key:
    description: "A Godot script encryption key to embed within the export template."
    required: false

  # MacOS-specific inputs.
  codesign-certificate-file:
    description: "The codesigning certificate file (only used on MacOS)."
    required: false
  codesign-certificate-password:
    description: "The codesigning certificate password (only used on MacOS)."
    required: false
  codesign-provisioning-profile:
    description: "The codesigning provisioning profile (only used on MacOS)."
    required: false
  notarization-api-uuid:
    description: "The notarization API UUID (only used on MacOS)."
    required: false
  notarization-api-key:
    description: "The notarization API key (only used on MacOS)."
    required: false
  notarization-api-key-id:
    description: "The notarization API key ID (only used on MacOS)."
    required: false
  notarization-apple-id-name:
    description: "The notarization Apple ID name (only used on MacOS)."
    required: false
  notarization-apple-id-password:
    description: "The notarization Apple ID name (only used on MacOS)."
    required: false

  # Windows-specific inputs.
  codesign-identity-type:
    description: "The codesigning identity type (only used on Windows)."
    required: false
  codesign-identity:
    description: "The codesigning identity (only used on Windows)."
    required: false
  codesign-password:
    description: "The codesigning password for the identity (only used on Windows)."
    required: false

  publish:
    description: "Whether to publish an artifact to the workflow."
    required: false
    default: false
  artifact-name:
    description: "The uploaded artifact's name (only used if 'publish' is 'true')."
    required: false

outputs:
  root:
    description: "The path to the root directory in which artifacts are exported into."
    value: ${{ github.workspace }}/dist
  path:
    description: "The path to the exported artifact."
    value: ${{ steps.artifact.outputs.path }}

runs:
  using: composite

  steps:
    # ----------------------------- Set up Godot ----------------------------- #

    - name: Determine Godot editor path
      id: editor
      shell: bash
      run: |
        EDITOR_PATH=$(mktemp -d -p ${{ github.workspace }})
        echo "path=${EDITOR_PATH#${{ github.workspace }}/}" >> $GITHUB_OUTPUT

    - uses: coffeebeats/godot-infra/.github/actions/setup-godot@main
      with:
        version: ${{ inputs.godot-editor-version }}
        install-dir: ${{ steps.editor.outputs.path }}

    # TODO: Consider removing this and using the input editor version instead.
    - name: Parse Godot editor version
      uses: "coffeebeats/godot-infra/.github/actions/parse-godot-version@main"
      id: godot-version
      with:
        editor-path: ${{ steps.editor.outputs.path }}/bin/godot
        minimum-major-version: 4
        minimum-minor-version: 3
        minimum-patch-version: 0

    - name: Copy the Godot project to the expected location
      id: project
      shell: bash
      run: |
        PROJECT_DIR=$(mktemp -d -p ${{ github.workspace }})

        for f in $(ls ${{ inputs.project-path }}); do
          if [[ "$f" == "$(basename $PROJECT_DIR)" ]]; then
            continue
          fi

          if [[ "$f" == "."* ]] || [[ "$f" == "tmp."* ]]; then
            continue
          fi

          mv ${{ inputs.project-path }}/$f $PROJECT_DIR
        done

        echo "Copied Godot project to target directory: $PROJECT_DIR"
        echo "dir=${PROJECT_DIR#${{ github.workspace }}/}" >> $GITHUB_OUTPUT

    # ------------------- Install the Godot export template ------------------ #

    - name: Copy the export template to the expected location
      shell: bash
      id: export-template
      run: |
        TARGET="${{ github.workspace }}/$(basename ${{ inputs.export-template-path }})"

        if [[ $(realpath "${{ inputs.export-template-path }}") == $(realpath "$TARGET") ]]; then
          echo "Godot export template already located at target path; exiting without making changes."
          exit 0
        fi

        cp ${{ inputs.export-template-path }} $TARGET

        echo "Copied Godot export template to target path: $TARGET"
        echo "path=${TARGET#${{ github.workspace }}/}" >> $GITHUB_OUTPUT

    - name: Set path to export template in 'export_presets.cfg'
      uses: coffeebeats/godot-infra/inspect-godot-export-presets@main
      with:
        project-path: ${{ github.workspace }}/${{ steps.project.outputs.dir }}
        operation: "set"
        preset: "${{ inputs.preset-name }}"
        key: "options.custom_template/$([[ ${{ inputs.profile }} == release ]] && echo release || echo debug)"
        value: "/github/workspace/${{ steps.export-template.outputs.path }}"

    # ---------------------- Configure export properties --------------------- #

    - name: Get the configured preset platform
      uses: coffeebeats/godot-infra/inspect-godot-export-presets@main
      id: preset-platform
      with:
        project-path: ${{ github.workspace }}/${{ steps.project.outputs.dir }}
        preset: "${{ inputs.preset-name }}"
        key: "platform"

    - name: Translate the preset platform
      id: platform
      shell: bash
      run: |-
        case "${{ steps.preset-platform.outputs.value }}" in
          "Windows Desktop" ) PLATFORM="windows" ;;
          "macOS" ) PLATFORM="macos" ;;
          "Linux/X11" ) PLATFORM="linux" ;;
          "Web" ) PLATFORM="web" ;;
          *)
            echo "Unknown platform: $PLATFORM"
            exit 1
            ;;
        esac

        echo "value=$PLATFORM" >> $GITHUB_OUTPUT
        echo "Determined platform for preset '${{ inputs.preset-name }}': $PLATFORM"

    - name: Get the configured preset export path
      uses: coffeebeats/godot-infra/inspect-godot-export-presets@main
      id: preset-export-path
      with:
        project-path: ${{ github.workspace }}/${{ steps.project.outputs.dir }}
        preset: "${{ inputs.preset-name }}"
        key: "export_path"

    - name: Determine preset output path for action
      id: export-path
      shell: bash
      run: |-
        EXPORT_PATH=$(
          echo ${{ steps.project.outputs.dir }}/${{ steps.preset-export-path.outputs.value }} \
            | xargs realpath -m --relative-to ${{ steps.project.outputs.dir }}
        )

        if [[ "$EXPORT_PATH" == "/"* ]] || [[ "$EXPORT_PATH" == ".."* ]]; then
          echo "Invalid 'export_path' property; expected project subpath: $EXPORT_PATH"
          exit 1
        fi

        echo "value=$EXPORT_PATH" >> $GITHUB_OUTPUT
        echo "Determined output path for preset '${{ inputs.preset-name }}': ./$EXPORT_PATH"

    - id: verbose
      shell: bash
      run: echo "enabled=$([[ "${{ runner.debug }}" -eq 1 ]] && echo true || echo false)" >> "$GITHUB_OUTPUT"

    # ----------------------- Export the project preset ---------------------- #

    - name: Create output directory
      shell: bash
      run: |
        if [[ -d "$GITHUB_WORKSPACE/dist" ]]; then
          echo "Unexpectedly found output directory."
          exit 1
        fi        

        mkdir $GITHUB_WORKSPACE/dist

    - name: Export the Godot project preset (MacOS)
      if: steps.platform.outputs.value == 'macos'
      uses: "coffeebeats/godot-infra/export-godot-project-preset/macos@main"
      with:
        pck-only: ${{ inputs.pck-only == 'true' || endsWith(steps.export-path.outputs.value, '.pck') }}
        preset-name: ${{ inputs.preset-name }}
        profile: ${{ inputs.profile }}
        verbose: ${{ steps.verbose.outputs.enabled }}

        godot-editor-path: ${{ steps.editor.outputs.path }}/bin/godot
        preset-output-path: dist/${{ steps.export-path.outputs.value }}
        project-path: ${{ steps.project.outputs.dir }}

        # Encryption secrets
        encryption-key: ${{ inputs.encryption-key }}

        # Codesigning secrets
        codesign-certificate-file: ${{ inputs.codesign-certificate-file }}
        codesign-certificate-password: ${{ inputs.codesign-certificate-password }}
        codesign-provisioning-profile: ${{ inputs.codesign-provisioning-profile }}
        notarization-api-uuid: ${{ inputs.notarization-api-uuid }}
        notarization-api-key: ${{ inputs.notarization-api-key }}
        notarization-api-key-id: ${{ inputs.notarization-api-key-id }}
        notarization-apple-id-name: ${{ inputs.notarization-apple-id-name }}
        notarization-apple-id-password: ${{ inputs.notarization-apple-id-password }}

    - name: Export the Godot project preset (Web)
      if: steps.platform.outputs.value == 'web'
      uses: "coffeebeats/godot-infra/export-godot-project-preset/web@main"
      with:
        pck-only: ${{ inputs.pck-only == 'true' || endsWith(steps.export-path.outputs.value, '.pck') }}
        preset-name: ${{ inputs.preset-name }}
        profile: ${{ inputs.profile }}
        verbose: ${{ steps.verbose.outputs.enabled }}

        godot-editor-path: ${{ steps.editor.outputs.path }}/bin/godot
        preset-output-path: dist/${{ steps.export-path.outputs.value }}
        project-path: ${{ steps.project.outputs.dir }}

        # Encryption secrets
        encryption-key: ${{ inputs.encryption-key }}

    - name: Export the Godot project preset (Windows)
      if: steps.platform.outputs.value == 'windows'
      uses: "coffeebeats/godot-infra/export-godot-project-preset/windows@main"
      with:
        pck-only: ${{ inputs.pck-only == 'true' || endsWith(steps.export-path.outputs.value, '.pck') }}
        preset-name: ${{ inputs.preset-name }}
        profile: ${{ inputs.profile }}
        verbose: ${{ steps.verbose.outputs.enabled }}

        godot-editor-path: ${{ steps.editor.outputs.path }}/bin/godot
        preset-output-path: dist/${{ steps.export-path.outputs.value }}
        project-path: ${{ steps.project.outputs.dir }}

        # Encryption secrets
        encryption-key: ${{ inputs.encryption-key }}

        # Codesigning secrets
        codesign-identity-type: ${{ inputs.codesign-identity-type }}
        codesign-identity: ${{ inputs.codesign-identity }}
        codesign-password: ${{ inputs.codesign-password }}

    # ----------------------- Collect export artifacts ----------------------- #

    - name: Move extra bundled files
      shell: bash
      run: |
        set -f

        for pattern in $(
            set -f
            echo "${{ inputs.extra-bundled-files }}" | tr ',' '\n' | sed -E 's/\\n/ /'
        ); do
            echo "Moving files that match pattern: $pattern"
            (
                set +f
                mv $pattern $GITHUB_WORKSPACE/dist
            )
        done

        set +f

    - name: Inspect exported artifacts
      shell: bash
      run: tree -lha --dirsfirst $GITHUB_WORKSPACE/dist

    # ---------------------- Publish generated artifacts --------------------- #

    - name: Evaluate exported artifact path
      id: artifact
      shell: bash
      run: |-
        echo name=$(
          [[ -z "${{ inputs.artifact-name }}" ]] &&
          echo $(basename "${{ steps.export-path.outputs.value }}") ||
          echo "${{ inputs.artifact-name }}"
        ) >> $GITHUB_OUTPUT

    # Upload exported artifact
    - uses: actions/upload-artifact@v4
      if: inputs.publish == 'true'
      with:
        name: ${{ steps.artifact.outputs.name }}
        # NOTE: Use a directory as opposed to specific files so that platforms
        # which generated folders or multiple files are supported.
        path: ${{ github.workspace }}/dist
        if-no-files-found: error
